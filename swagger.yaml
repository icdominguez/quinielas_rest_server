openapi: 3.0.0
info:
  title: Quinielas API
  description: Swagger Quinielas - OpenAPI 3.0.
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Server for testing
tags:
  - name: auth
    description: Everything realted to users authentication
  - name: user 
    description: Everything about users
  - name: team
    description: Operation about teams
  - name: league
    description: Everything about leagues
  - name: match
    description: Everything about matches
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate a user into the app
      description: Authenticate a user into the app
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login
  /user:
    post:
      tags:
        - user
      summary: Adds a new user to the database
      description: New user will be added if not exist in database. Only supported for normal users, not admins
      operationId: AddUser
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User schema from mongoose
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'                    
  /user/{userId}:
    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Deletes a user from the database
      description: Delete a user from the database if it exists
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User succesfully deleted from database'
        '400':
          description: 'Invalid id provided'
  /team/league/{leagueId}:
    get:
      tags:
        - team
      security:
        - bearerAuth: []
      summary: Returns every team for the specified league
      description: Get all teams asociated to an specific existing league
      operationId: getTeamsByLeague
      parameters:
        - name: leagueId
          in: path
          description: league to provide it teams
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Corresponding teams
          content:
            application/json:
              schema:
              type: array
              items:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid id provided
  /team/{teamId}:
    delete:
      tags:
        - team
      security:
        - bearerAuth: []
      summary: Deletes a team by its object id
      parameters:
        - name: teamId
          in: path
          description: team to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Team succesfully deleted from database'
        '400':
          description: 'Invalid id provided'
  /team:
    get:
      tags:
        - team
      security:
        - bearerAuth: []
      summary: Returns a specific team by the id provided
      description: Return a team if it exists in database
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          description: team to search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Searched team
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    post:
      tags: 
        - team
      security:
        - bearerAuth: []
      summary: Adds a new Team for an specific league.
      description: New team will be added if not exist to the specified league uploading the image attached to cloudinary.
      operationId: addTeam
      requestBody:
        content:
          multipart/form-data:
            schema:
                type: object
                properties:
                  name: 
                    type: string
                    description: Name of the new team
                    required: true
                  image:
                    type: string
                    format: binary
                    description: Appropiate logo for the new team
                    required: true
                  league:
                    type: string
                    description: Object id of the league related to the new team
                    required: true
      responses:
        '200':
          description: Team schema from mongoose
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Team'        
  /team/{teamId}/image:
    put:
      tags:
        - team
      security:
        - bearerAuth: []
      summary: Updates the image of an existing team
      parameters:
        - name: teamId
          in: path
          description: team to delete
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: New image to be set on the team
                    required: true
      responses:
        '200':
          description: 'Team succesfully updated'
        '400':
          description: 'Invalid id or image provided'
  /league:
    get:
      tags:
        - league
      security:
        - bearerAuth: []
      summary: Returns all available leagues
      description: Returns all available leagues in database
      operationId: getAllLeagues
      responses:
        '200':
          description: Available leagues
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/League'
    post:
      tags:
        - league
      security:
        - bearerAuth: []
      summary: Adds a new league
      description: New league that will include new teams
      operationId: addLeague
      requestBody:
        content:
          multipart/form-data:
            schema:
                type: object
                properties:
                  name: 
                    type: string
                    description: Name of the new team
                    required: true
                  image:
                    type: string
                    format: binary
                    description: Appropiate logo for the new team
                    required: true
      responses:
              '200':
                description: Team schema from mongoose
                content:
                  application/json:
                    schema: 
                      $ref: '#/components/schemas/League'
  /match:
    post:
      tags: 
        - match
      security:
        - bearerAuth: []
      summary: Creates a new match
      description: Creates a new match in the database if home and away teams ids are valid.
      operationId: addMatch
      requestBody:
        description: Creates a new match in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: Created match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
  /match/{matchId}:
    get:
      tags:
        - match
      security:
        - bearerAuth: []
      summary: Returns a match if it exists in database
      description: Provide a valid mongo id corresponfing to a match and it will be returned
      operationId: getMatchById
      parameters:
        - name: matchId
          in: path
          description: match to search
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Created match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '400':
          description: Founded match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
    put:
      tags:
        - match
      security:
        - bearerAuth: []
      summary: Updates the match provided by id
      description: It doesn't matter which param needs to be update. Just send the proper json and it will be updated
      operationId: updateMatch
      parameters:
        - name: matchId
          in: path
          description: match to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: Match object updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
    delete:
      tags:
        - match
      security:
        - bearerAuth: []
      summary: Deletes an existing match in database
      description: Provide a valid mongo id corresponding to a match and it will be deleted
      operationId: deleteMatch
      parameters:
          - name: matchId
            in: path
            description: match to delete
            required: true
            schema:
              type: string
      responses:
        '200':
          description: 'Team succesfully deleted from database'
        '400':
          description: 'Invalid id provided'
  /match/all:
    get:
      tags:
        - match
      security:
        - bearerAuth: []
      summary: Returns all the matches available
      description: Returns all the matches created in the database
      operationId: getAllMatches
      responses:
        '200':
          description: Available matches
          content:
            application/json:
              schema:
              type: array
              items:
                $ref: '#/components/schemas/Match'
        '400':
          description: Invalid id provided
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  schemas:
    Login:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: icordondominguez@gmail.com
        password: 
          type: string
          example: 10sept2024
    User:
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
          example: Ismael
        email:
          type: string
          example: icordondominguez@gmail.com
        password:
          type: string
          example: 7sept2024
    Team:
      required:
        - _id
        - name
        - image
        - league
        - __v0
      type: object
      properties: 
        _id:
          type: String
          example: 66d6f939d02d29f6426b564f
        name: 
          type: string
          example: F.C Barcelona
        image:
          type: string
          example: https://res.cloudinary.com/dxgbzekei/image/upload/v1725364538/e2uqmqouvga7ukr1yqwl.png
        league:
          type: string
          enum:
            - LaLiga
            - LaLiga2
          example: LaLiga
        __v:
          type: string
          example: 0
    League:
      required:
        - _id
        - name
        - image
        - __v0
      type: object
      properties: 
        _id:
          type: String
          example: 66d6f939d02d29f6426b564f
        name: 
          type: string
          example: LaLiga
        image:
          type: string
          example:
        __v:
          type: string
          example: 0
    Match:
      required:
        - home_team_info
        - away_team_info
        - date
        - __v0
      type: object
      properties:
        home_team_info:
          $ref: '#/components/schemas/MatchInfo'
        away_team_info: 
          $ref: '#/components/schemas/MatchInfo'
        date:
          type: integer
          format: int64
          example: 1725541239
    MatchInfo:
      required:
        - team_id
      type: object
      properties:
        team_id:
          type: string
          example: '66d86491c4e9215aab8e9e32'
        score:
          type: integer
          example: 0